{"version":3,"file":"react-loading-overlay-ts.cjs.production.min.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import { FC } from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: FC<SpinnerProps> = (props) => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]?: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null | undefined = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement;\n    if (this.wrapperEl !== null && this.wrapperEl !== undefined) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (\n        ['overflow', 'overflowX', 'overflowY'] as Array<keyof OverflowCSS>\n      ).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES?.[key]?.(providedState, this.props);\n    const custom: Styles[keyof Styles] | boolean =\n      (styles as Styles)?.[key] ?? false;\n    if (!custom) return base;\n    return (\n      typeof custom === 'function' ? custom(base, this.props) : custom\n    ) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map((name) => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n        >\n          {(state) => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","_jsx","className","cx","css","getStyles","children","jsx","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","name","styles","spinnerDash","wrapper","state","_extends","position","overlay","_props$fadeSpeed","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","wrapperEl","overlayRef","createRef","overflowCSS","undefined","key","providedState","_STYLES$key","_styles$key","_this$props$styles","_this","base","STYLES","call","custom","names","_this$props$className","classNamePrefix","arr","Array","isArray","_len2","arguments","length","args","_key2","map","componentDidMount","_this$overlayRef$curr","this","current","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","_this2","_this$props","onClick","_this$props$fadeSpeed","_this$props$spinner","text","_jsxs","ref","innerRef","CSSTransition","in","classNames","timeout","unmountOnExit","jsxs","PureComponent","displayName","forwardRef"],"mappings":"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"}