{"version":3,"file":"react-loading-overlay-ts.esm.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import { FC } from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: FC<SpinnerProps> = (props) => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]?: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null | undefined = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement;\n    if (this.wrapperEl !== null && this.wrapperEl !== undefined) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (\n        ['overflow', 'overflowX', 'overflowY'] as Array<keyof OverflowCSS>\n      ).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES?.[key]?.(providedState, this.props);\n    const custom: Styles[keyof Styles] | boolean =\n      (styles as Styles)?.[key] ?? false;\n    if (!custom) return base;\n    return (\n      typeof custom === 'function' ? custom(base, this.props) : custom\n    ) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map((name) => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n        >\n          {(state) => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","_jsx","className","cx","css","getStyles","children","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","spinnerDash","styles","wrapper","state","position","overlay","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","wrapperEl","overlayRef","createRef","overflowCSS","undefined","key","providedState","base","STYLES","custom","names","classNamePrefix","arr","Array","isArray","args","map","name","componentDidMount","current","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","onClick","text","innerRef","_jsxs","ref","CSSTransition","classNames","timeout","unmountOnExit","PureComponent","displayName","LoadingOverlayWrapper","forwardRef"],"mappings":"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"}